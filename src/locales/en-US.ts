export default {
  common: {
    confirm: 'Confirm',
    cancel: 'Cancel',
    save: 'Save',
    delete: 'Delete',
    edit: 'Edit',
    add: 'Add',
    search: 'Search',
    loading: 'Loading',
    success: 'Success',
    error: 'Error',
    openInNewWindow: 'Open in New Window',
    inputMessage: 'Enter message or command',
    send: 'Send',
    noData: 'No Data',
    noContent: 'No relevant content found',
    all: 'All',
    default: 'Default',
    name: 'Name',
    create: 'Create',
    saving: 'Saving',
    reset: 'Reset',
    theme: 'Theme',
    language: 'Language',
    pleaseWait: 'Please wait...',
  },
  mediaType: {
    movie: 'Movie',
    tv: 'TV Show',
    anime: 'Anime',
    collection: 'Collection',
    unknown: 'Unknown',
  },
  theme: {
    light: 'Light',
    dark: 'Dark',
    auto: 'Follow System',
    transparent: 'Transparent',
    purple: 'Purple',
    custom: 'Custom Theme',
    customCssSaveSuccess: 'Custom CSS saved successfully, please refresh the page to take effect!',
    customCssSaveFailed: 'Failed to save custom CSS to server',
    deviceNotSupport: 'Current device does not support monitoring system theme changes',
  },
  app: {
    moviepilot: 'MoviePilot',
    recommend: 'Recommend',
    subscribeMovie: 'Movie Subscription',
    subscribeTv: 'TV Subscription',
    settings: 'Settings',
    selectLanguage: 'Select Language',
    logout: 'Logout',
    restarting: 'Restarting...',
    confirmRestart: 'Confirm restart system?',
    restartTip: 'After restart, you will be logged out and need to log in again.',
  },
  login: {
    wallpapers: 'Wallpapers',
    username: 'Username',
    password: 'Password',
    otpCode: 'Two-Factor Code',
    stayLoggedIn: 'Stay Logged In',
    login: 'Login',
    networkError: 'Login failed, please check your network connection!',
    authFailure: 'Login failed, please check your username, password or two-factor authentication!',
    permissionDenied: 'Login failed, you do not have permission to access!',
    serverError: 'Login failed, server error!',
    loginFailed: 'Login Failed',
    checkCredentials: 'Please check your username, password or two-factor authentication code!',
  },
  menu: {
    start: 'Start',
    discovery: 'Discovery',
    subscribe: 'Subscribe',
    organize: 'Organize',
    system: 'System',
  },
  navItems: {
    dashboard: 'Dashboard',
    mediaInfo: 'Media Library',
    recommend: 'Recommend',
    site: 'Sites',
    search: 'Search',
    searchResult: 'Search Results',
    download: 'Download',
    movieSubscribe: 'Movie Subscription',
    tvSubscribe: 'TV Subscription',
    history: 'History',
    transfer: 'Organize',
    rename: 'Rename',
    statistic: 'Statistics',
    setting: 'Settings',
    plugin: 'Plugins',
    user: 'Users',
    about: 'About',
    explore: 'Explore',
    movie: 'Movies',
    tv: 'TV Shows',
    workflow: 'Workflow',
    calendar: 'Calendar',
    downloadManager: 'Download Manager',
    mediaOrganize: 'Media Organize',
    fileManager: 'File Manager',
    pluginManager: 'Plugins',
    siteManager: 'Site Management',
    userManager: 'User Management',
    settings: 'Settings',
  },
  settingTabs: {
    system: {
      title: 'System',
      description: 'Basic settings, downloaders (Qbittorrent, Transmission), media servers (Emby, Jellyfin, Plex)',
    },
    directory: {
      title: 'Storage & Directories',
      description: 'Download directory, media library directory, organization, scraping',
    },
    site: {
      title: 'Sites',
      description: 'Site synchronization, site data refresh, site reset',
    },
    rule: {
      title: 'Rules',
      description: 'Custom rules, priority rule groups, download rules',
    },
    search: {
      title: 'Search & Download',
      description: 'Search data sources (TheMovieDb, Douban, Bangumi), download task tags, search sites',
    },
    subscribe: {
      title: 'Subscription',
      description: 'Subscription sites, subscription mode, subscription rules, version upgrade rules',
    },
    scheduler: {
      title: 'Services',
      description: 'Scheduled jobs',
    },
    notification: {
      title: 'Notifications',
      description: 'Notification channels (WeChat, Telegram, Slack, SynologyChat, VoceChat, WebPush), message scope',
    },
    words: {
      title: 'Word Lists',
      description:
        'Custom recognition words, custom production/subtitle groups, custom placeholders, file organization block words',
    },
    about: {
      title: 'About',
      description: 'Software version',
    },
  },
  subscribeTabs: {
    movie: {
      mysub: 'My Subscriptions',
      popular: 'Popular Subscriptions',
    },
    tv: {
      mysub: 'My Subscriptions',
      popular: 'Popular Subscriptions',
      share: 'Subscription Shares',
    },
  },
  pluginTabs: {
    installed: 'My Plugins',
    market: 'Plugin Market',
  },
  discoverTabs: {
    themoviedb: 'TheMovieDb',
    douban: 'Douban',
    bangumi: 'Bangumi',
  },
  user: {
    admin: 'Administrator',
    normalUser: 'Regular User',
    profile: 'Profile',
    systemSettings: 'System Settings',
    siteAuth: 'User Authentication',
    helpDocs: 'Help Documents',
    restart: 'Restart',
    management: 'User Management',
    noUsers: 'No Users',
    clickToAddUser: 'Click Add User card to add users',
    addUser: 'Add User',
    editUser: 'Edit User',
    username: 'Username',
    password: 'Password',
    confirmPassword: 'Confirm Password',
    role: 'Role',
    email: 'Email',
    enabled: 'Enabled',
    disabled: 'Disabled',
    status: 'Status',
    operations: 'Operations',
  },
  nav: {
    more: 'More',
  },
  notification: {
    center: 'Notification Center',
    markRead: 'Mark as Read',
    empty: 'No Notifications',
  },
  shortcut: {
    title: 'Shortcuts',
    recognition: {
      title: 'Recognition',
      subtitle: 'Name Recognition Test',
    },
    rule: {
      title: 'Rules',
      subtitle: 'Rule Testing',
    },
    log: {
      title: 'Logs',
      subtitle: 'Real-time Logs',
    },
    network: {
      title: 'Network',
      subtitle: 'Network Speed and Connectivity Test',
    },
    system: {
      title: 'System',
      subtitle: 'Health Check',
    },
    message: {
      title: 'Messages',
      subtitle: 'Message Center',
    },
  },
  workflow: {
    components: 'Action Components',
    clickToAdd: 'Click to Add',
    dragToCanvas: 'Drag to Canvas',
    tapComponentHint: 'Tap component to add to canvas',
    dragComponentHint: 'Drag component to canvas',
  },
  dashboard: {
    storage: 'Storage Space',
    mediaStatistic: 'Media Statistics',
    weeklyOverview: 'Recent Additions',
    speed: 'Real-time Speed',
    scheduler: 'Background Tasks',
    cpu: 'CPU',
    memory: 'Memory',
    library: 'My Media Library',
    playing: 'Continue Watching',
    latest: 'Recently Added',
    settings: 'Dashboard Settings',
    chooseContent: 'Choose content you want to display on the page',
    adaptiveHeight: 'Adaptive Component Height',
  },
  media: {
    status: {
      inLibrary: 'In Library',
      missing: 'Missing',
      partiallyMissing: 'Partially Missing',
      subscribed: 'Subscribed',
    },
    minutes: 'minutes',
    overview: 'Overview',
    seasons: 'Seasons',
    seasonNumber: 'Season {number}',
    episodeCount: '{count} Episodes',
    actions: {
      searchResource: 'Search Resource',
      subscribe: 'Subscribe',
      playOnline: 'Play Online',
    },
    search: {
      byTitle: 'Title',
      byImdb: 'IMDB Link',
    },
    info: {
      originalTitle: 'Original Title',
      status: 'Status',
      releaseDate: 'Release Date',
      originalLanguage: 'Original Language',
      productionCountries: 'Production Countries',
      productionCompanies: 'Production Companies',
      doubanId: 'Douban ID',
    },
    subscribe: {
      normal: 'Subscribe',
      bestVersion: 'Best Version Subscribe',
      addFailed: 'Failed to add subscription: {reason}!',
      canceled: 'Subscription canceled!',
      cancelFailed: 'Failed to cancel subscription: {reason}!',
    },
    castAndCrew: 'Cast & Crew',
    recommendations: 'Recommendations',
    similar: 'Similar',
    error: {
      title: 'Error!',
      noMediaInfo: 'No media information recognized.',
    },
  },
  subscribe: {
    normalSub: 'Subscribe',
    versionSub: 'Version Upgrade Subscribe',
    addSuccess: 'Added {name} successfully!',
    addFailed: 'Failed to add {name}: {message}!',
    cancelSuccess: 'Subscription cancelled!',
    cancelFailed: 'Failed to cancel subscription: {message}!',
    filterSubscriptions: 'Filter Subscriptions',
    name: 'Name',
    searchShares: 'Search Subscription Shares',
    keyword: 'Keyword',
    noShareData: 'No shared subscription data received, data sharing not enabled or server cannot connect.',
    noPopularData: 'No popular subscription data received, data sharing not enabled or server cannot connect.',
    noFilterData: 'No related content found with current filters, please change filter conditions.',
    noSubscribeData: 'Please search to add movie or TV show subscriptions.',
    sharer: 'Sharer',
    follow: 'Follow',
    unfollow: 'Unfollow',
    recognitionWords: 'Recognition Words',
    cancelShare: 'Cancel Share',
    usageCount: '{count} Uses',
  },
  recommend: {
    all: 'All',
    categoryMovie: 'Movies',
    categoryTV: 'TV Shows',
    categoryAnime: 'Anime',
    categoryRankings: 'Rankings',
    trendingNow: 'Trending Now',
    nowShowing: 'Now Showing',
    bangumiDaily: 'Bangumi Daily Release',
    tmdbHotMovies: 'TMDB Hot Movies',
    tmdbHotTVShows: 'TMDB Hot TV Shows',
    doubanHotMovies: 'Douban Hot Movies',
    doubanHotTVShows: 'Douban Hot TV Shows',
    doubanHotAnime: 'Douban Hot Anime',
    doubanNewMovies: 'Douban New Movies',
    doubanNewTVShows: 'Douban New TV Shows',
    doubanTop250: 'Douban Top 250 Movies',
    doubanChineseTVRankings: 'Douban Chinese TV Rankings',
    doubanGlobalTVRankings: 'Douban Global TV Rankings',
    noCategoryContent: 'No content to display in current category',
    configureContent: 'Configure Display Content',
    customizeContent: 'Customize Content',
    selectContentToDisplay: 'Select content you want to display on the page',
    selectAll: 'Select All',
    selectNone: 'Select None',
  },
  discover: {
    setTabOrder: 'Set Tab Order',
    dragToReorder: 'Drag to reorder tabs',
  },
  downloading: {
    noDownloader: 'No Downloader',
    configureDownloader: 'Please configure and enable a downloader in settings first.',
  },
  resource: {
    searchResults: 'Resource Search Results',
    keyword: 'Keyword',
    title: 'Title',
    year: 'Year',
    season: 'Season',
    switchingView: 'Switching View',
    backToHome: 'Back to Home',
    searching: 'Searching, please wait...',
    noData: 'No Data',
    noResourceFound: 'No resources found',
  },
  browse: {
    actor: 'Actor',
  },
  appcenter: {
    others: 'Others',
  },
  notFound: {
    title: 'Page Not Found ⚠️',
    description: 'The page you tried to access does not exist. Please check if the address is correct.',
    backButton: 'Go Back',
  },
  torrent: {
    sortDefault: 'Default',
    sortSite: 'Site',
    sortSize: 'Size',
    sortSeeder: 'Seeders',
    filterSite: 'Site',
    filterSeason: 'Season/Episode',
    filterFreeState: 'Promotion Status',
    filterVideoCode: 'Video Codec',
    filterEdition: 'Quality',
    filterResolution: 'Resolution',
    filterReleaseGroup: 'Release Group',
    clearFilters: 'Clear',
    selectAll: 'Select All',
    loadMore: 'Load More',
    noMatchingResults: 'No matching results',
  },
  calendar: {
    episode: 'Episode {number}',
  },
  storage: {
    usedPercent: '{percent}% Used',
  },
  site: {
    noSites: 'No Sites',
    sitesWillBeShownHere: 'Added and supported sites will be displayed here.',
    title: 'Site',
    status: {
      enabled: 'Enabled',
      disabled: 'Disabled',
    },
    fields: {
      url: 'Site URL',
      priority: 'Priority',
      status: 'Status',
      rss: 'RSS URL',
      timeout: 'Timeout (seconds)',
      downloader: 'Downloader',
      cookie: 'Site Cookie',
      userAgent: 'User-Agent',
      authorization: 'Authorization Header',
      apiKey: 'API Key',
      limitAccess: 'Limit Site Access Frequency',
      limitInterval: 'Interval Period (seconds)',
      limitCount: 'Access Count per Period',
      limitSeconds: 'Access Interval (seconds)',
      useProxy: 'Use Proxy',
      browserSimulation: 'Browser Simulation',
    },
    hints: {
      url: 'Format: http://www.example.com/',
      priority: 'Lower priority value means higher priority',
      status: 'Enable/Disable site',
      rss: 'Subscription link used when subscription mode is `Site RSS`, manual input if not auto-retrieved',
      timeout: 'Site request timeout, no limit when set to 0',
      downloader: 'Downloader used for this site',
      cookie: 'Cookie information in site request header',
      userAgent: 'User-Agent of the browser used to get Cookie',
      authorization: 'Authorization information in site request header, required for special sites',
      apiKey: 'Site API Key, required for special sites',
      limitInterval: 'Duration of the rate limit control period',
      limitCount: 'Allowed access count within the period',
      limitSeconds: 'Minimum interval between each access',
      useProxy: 'Use proxy server to access this site',
      browserSimulation: 'Use browser simulation for authentic site access',
    },
    actions: {
      add: 'Add',
      edit: 'Edit',
    },
    messages: {
      addSuccess: 'Site added successfully',
      addFailed: 'Failed to add site',
      updateSuccess: 'Updated successfully',
      updateFailed: 'Update failed',
    },
    errors: {
      loadDownloader: 'Failed to load downloader settings',
    },
  },
  message: {
    loadMore: 'Load More',
    noMoreData: 'No more data',
  },
  logging: {
    level: 'Level',
    time: 'Time',
    program: 'Program',
    content: 'Content',
    refreshing: 'Refreshing',
  },
  moduleTest: {
    normal: 'Normal',
    disabled: 'Disabled',
    error: 'Error',
  },
  nameTest: {
    recognize: 'Recognize',
    recognizing: 'Recognizing...',
    recognizeAgain: 'Recognize Again',
    title: 'Title',
    subtitle: 'Subtitle',
  },
  netTest: {
    notTested: 'Not Tested',
    testing: 'Testing...',
    normal: 'Normal',
  },
  ruleTest: {
    test: 'Test',
    testing: 'Testing...',
    testAgain: 'Test Again',
    title: 'Title',
    subtitle: 'Subtitle',
    ruleGroup: 'Rule Group',
    priority: 'Priority: {value}',
    noPriorityRule: 'No priority rule matched!',
  },
  setting: {
    about: {
      title: 'About MoviePilot',
      softwareVersion: 'Software Version',
      frontendVersion: 'Frontend Version',
      authVersion: 'Auth Resource Version',
      indexerVersion: 'Indexer Resource Version',
      configDir: 'Config Directory',
      dataDir: 'Data Directory',
      timezone: 'Timezone',
      latest: 'Latest',
      support: 'Support',
      documentation: 'Documentation',
      feedback: 'Feedback',
      channel: 'Release Channel',
      versions: 'Software Versions',
      latestVersion: 'Latest Version',
      currentVersion: 'Current Version',
      viewChangelog: 'View Changelog',
      changelog: 'Changelog',
      dataDirectory: '/moviepilot',
    },
    system: {
      basicSettings: 'Basic Settings',
      basicSettingsDesc: 'Configure server global functions.',
      appDomain: 'Access Domain',
      appDomainHint: 'Used to add quick jump links when sending notifications',
      wallpaper: 'Background Wallpaper',
      wallpaperHint: 'Choose the source of the login page background',
      recognizeSource: 'Recognition Data Source',
      recognizeSourceHint: 'Set the default media info recognition data source',
      mediaServerSyncInterval: 'Media Server Sync Interval',
      mediaServerSyncIntervalHint: 'Time interval for syncing media server data to local',
      hours: 'hours',
      required: 'Required field, please fill in',
      numbersOnly: 'Only numbers are supported, please do not enter other characters',
      minInterval: 'Interval cannot be less than 1 hour',
      apiToken: 'API Token',
      apiTokenHint: 'Set the token value used when external requests access MoviePilot API',
      apiTokenMinChars: 'Cannot be less than 16 characters',
      apiTokenRequired: 'Required field; please enter API Token',
      apiTokenLength: 'API Token must be at least 16 characters',
      githubToken: 'Github Token',
      githubTokenFormat: 'ghp_**** or github_pat_****',
      githubTokenHint: 'Used to increase the rate limit threshold when plugins access Github API',
      ocrHost: 'OCR Server',
      ocrHostHint: 'Used for site check-in, updating site cookies and other captcha recognition',
      advancedSettings: 'Advanced Settings',
      advancedSettingsDesc: 'System advanced settings, only need to be adjusted in special cases',
      downloaders: 'Downloaders',
      downloadersDesc: 'Only the default downloader will be used by default.',
      mediaServers: 'Media Servers',
      mediaServersDesc: 'All enabled media servers will be used.',
      trimeMedia: 'TrimeMedia',
      system: 'System',
      media: 'Media',
      network: 'Network',
      log: 'Log',
      lab: 'Lab',
      downloaderSaveSuccess: 'Downloader settings saved successfully',
      downloaderSaveFailed: 'Failed to save downloader settings!',
      defaultDownloaderNotice: 'No default downloader set, [{name}] has been set as the default downloader',
      mediaServerSaveSuccess: 'Media server settings saved successfully',
      mediaServerSaveFailed: 'Failed to save media server settings!',
      saveFailed: 'Failed to save settings: {message}!',
      basicSaveSuccess: 'Basic settings saved successfully',
      advancedSaveSuccess: 'Advanced settings saved successfully',
      copySuccess: 'Copied to clipboard!',
      copyFailed: 'Copy failed: browser may not support or user blocked!',
      copyError: 'Copy failed!',
      reloading: 'Applying configuration...',
      qbittorrent: 'Qbittorrent',
      transmission: 'Transmission',
      emby: 'Emby',
      jellyfin: 'Jellyfin',
      plex: 'Plex',
      reloadSuccess: 'System configuration has taken effect',
      reloadFailed: 'Failed to reload system!',
      auxAuthEnable: 'User Auxiliary Authentication',
      auxAuthEnableHint: 'Allow external services to authenticate login and automatically create users',
      globalImageCache: 'Global Image Cache',
      globalImageCacheHint: 'Cache media images locally to improve image loading speed',
      subscribeStatisticShare: 'Share Subscription Data',
      subscribeStatisticShareHint:
        'Share subscription statistics to popular subscriptions for other MP users to reference',
      pluginStatisticShare: 'Report Plugin Installation Data',
      pluginStatisticShareHint: 'Report plugin installation data to the server for statistics and display purposes',
      bigMemoryMode: 'Large Memory Mode',
      bigMemoryModeHint: 'Use more memory to cache data and improve system performance',
      dbWalEnable: 'WAL Mode',
      dbWalEnableHint:
        'Can improve read/write concurrency performance, but may increase the risk of data loss in exceptional cases, requires restart to take effect',
      tmdbApiDomain: 'TMDB API Service Address',
      tmdbApiDomainPlaceholder: 'api.themoviedb.org',
      tmdbApiDomainHint: 'Customize themoviedb API domain or proxy address',
      tmdbApiDomainRequired: 'Please enter TMDB API domain',
      tmdbImageDomain: 'TMDB Image Service Address',
      tmdbImageDomainPlaceholder: 'image.tmdb.org',
      tmdbImageDomainHint: 'Customize themoviedb image service domain or proxy address',
      tmdbImageDomainRequired: 'Please enter image service domain',
      tmdbLocale: 'TMDB Metadata Language',
      tmdbLocalePlaceholder: 'en',
      tmdbLocaleHint: 'Customize themoviedb metadata language',
      metaCacheExpire: 'Media Metadata Cache Expiration Time',
      metaCacheExpireHint: 'Recognition metadata local cache time, use built-in default value when set to 0',
      metaCacheExpireRequired: 'Please enter metadata cache time',
      metaCacheExpireMin: 'Metadata cache time must be greater than or equal to 0',
      scrapFollowTmdb: 'Follow TMDB Recognition',
      scrapFollowTmdbHint:
        'When turned off, organization history will be used (if available) to avoid TMDB data changes during subscription',
      fanartEnable: 'Fanart Image Data Source',
      fanartEnableHint: 'Use image data from fanart.tv',
      githubProxy: 'Github Acceleration Proxy',
      githubProxyPlaceholder: 'Leave empty for no proxy',
      githubProxyHint: 'Use proxy to accelerate Github access speed',
      pipProxy: 'PIP Acceleration Proxy',
      pipProxyPlaceholder: 'Leave empty for no proxy',
      pipProxyHint: 'Use proxy to accelerate pip library installation speed for plugins, etc.',
      dohEnable: 'DNS Over HTTPS',
      dohEnableHint: 'Use DOH to resolve specific domains to prevent DNS pollution',
      dohResolvers: 'DOH Servers',
      dohResolversPlaceholder: 'https://dns.google/dns-query,1.1.1.1',
      dohResolversHint: 'DNS resolver server addresses, multiple addresses separated by commas',
      dohDomains: 'DOH Domains',
      dohDomainsPlaceholder: 'example.com,example2.com',
      dohDomainsHint: 'Domains to be resolved using DOH, multiple domains separated by commas',
      debug: 'Debug Mode',
      debugHint: 'When debug mode is enabled, logs will be recorded at DEBUG level to help troubleshoot issues',
      logLevel: 'Log Level',
      logLevelHint: 'Set the level of log recording to control log output volume',
      logMaxFileSize: 'Maximum Log File Size (MB)',
      logMaxFileSizeHint: 'Limit the maximum size of a single log file, logs will be split automatically when exceeded',
      logMaxFileSizeRequired: 'Maximum log file size',
      logMaxFileSizeMin: 'Maximum log file size must be greater than or equal to 1',
      logBackupCount: 'Maximum Number of Log File Backups',
      logBackupCountHint:
        'Set the maximum number of backups for each module log file, old logs will be overwritten when exceeded',
      logBackupCountRequired: 'Please enter the maximum number of log file backups',
      logBackupCountMin: 'Maximum number of log file backups must be greater than or equal to 1',
      logFileFormat: 'Log File Format',
      logFileFormatHint: 'Set the output format of log files to customize the displayed content of logs',
      pluginAutoReload: 'Plugin Hot Reload',
      pluginAutoReloadHint: 'Automatically reload after modifying plugin files, used when developing plugins',
      encodingDetectionPerformanceMode: 'Encoding Detection Performance Mode',
      encodingDetectionPerformanceModeHint:
        'Prioritize detection efficiency, but may reduce encoding detection accuracy',
      tokenizedSearch: 'Tokenized Search',
      tokenizedSearchHint:
        'Improve organization history search precision, but may increase performance overhead and unexpected results',
      tmdbLanguage: {
        zhCN: 'Simplified Chinese',
        zhTW: 'Traditional Chinese',
        en: 'English',
      },
      logLevelItems: {
        debug: 'DEBUG',
        info: 'INFO',
        warning: 'WARNING',
        error: 'ERROR',
        critical: 'CRITICAL',
      },
      wallpaperItems: {
        tmdb: 'TMDB Movie Posters',
        bing: 'Bing Daily Wallpaper',
        bingDaily: 'Bing Daily Image',
        none: 'No Wallpaper',
      },
      mb: 'MB',
      hour: 'hour',
    },
    site: {
      siteSync: 'Site Synchronization',
      siteSyncDesc: 'Quickly sync site data from CookieCloud.',
      enableLocalCookieCloud: 'Enable Local CookieCloud Server',
      enableLocalCookieCloudHint:
        'Use built-in CookieCloud service to sync site data, service address: http://localhost:3000/cookiecloud',
      serviceAddress: 'Service Address',
      serviceAddressPlaceholder: 'https://movie-pilot.org/cookiecloud',
      serviceAddressHint: 'Remote CookieCloud service address, format: https://movie-pilot.org/cookiecloud',
      userKey: 'User KEY',
      userKeyHint: 'User KEY generated by CookieCloud browser plugin',
      e2ePassword: 'End-to-End Encryption Password',
      e2ePasswordHint: 'End-to-end encryption password generated by CookieCloud browser plugin',
      autoSyncInterval: 'Auto Sync Interval',
      autoSyncIntervalHint:
        'Time interval for automatically syncing site cookies from CookieCloud server to MoviePilot',
      syncBlacklist: 'Sync Domain Blacklist',
      syncBlacklistPlaceholder: 'Multiple domains, separated by commas',
      syncBlacklistHint: 'CookieCloud sync domain blacklist, multiple domains separated by commas',
      userAgent: 'Browser User-Agent',
      userAgentHint: 'User-Agent of the browser with CookieCloud plugin',
      siteDataRefresh: 'Site Data Refresh',
      siteDataRefreshInterval: 'Site Data Refresh Interval',
      siteDataRefreshIntervalHint: 'Time interval for refreshing site user upload/download data',
      readSiteMessage: 'Read Site Messages',
      readSiteMessageHint: 'Read site messages and send notifications when refreshing data',
      siteReset: 'Site Reset',
      confirmReset: 'Confirm to delete all site data and resync.',
      confirmResetHint:
        'Delete all site data and resync from CookieCloud. Please clear all related site settings before this operation.',
      resetSites: 'Reset Site Data',
      resettingSites: 'Resetting...',
      syncInterval: {
        hourly: 'Hourly',
        every6Hours: 'Every 6 Hours',
        every12Hours: 'Every 12 Hours',
        daily: 'Daily',
        weekly: 'Weekly',
        monthly: 'Monthly',
        never: 'Never',
      },
      saveSuccess: 'Site settings saved successfully',
      saveFailed: 'Failed to save site settings!',
      resetSuccess: 'Sites reset successfully, please wait for CookieCloud sync to complete!',
      resetFailed: 'Failed to reset sites!',
    },
    notification: {
      channels: 'Notification Channels',
      channelsDesc: 'Set message sending channel parameters.',
      scope: 'Notification Scope',
      scopeDesc: 'Corresponding message types will only be sent to specified users.',
      messageType: 'Message Type',
      scopeRange: 'Scope',
      operationUserOnly: 'Operation User Only',
      adminOnly: 'Admin Only',
      userAndAdmin: 'Operation User and Admin',
      allUsers: 'All Users',
      sendTime: 'Notification Send Time',
      sendTimeDesc: 'Set the time range for sending messages.',
      startTime: 'Start Time',
      endTime: 'End Time',
      saveSuccess: 'Notification settings saved successfully',
      saveFailed: 'Failed to save notification settings!',
      switchSaveSuccess: 'Message type switches saved successfully',
      switchSaveFailed: 'Failed to save message type switches!',
      timeSaveSuccess: 'Notification send time saved successfully',
      timeSaveFailed: 'Failed to save notification send time!',
      channel: 'Notification',
      wechat: 'WeChat',
      resourceDownload: 'Resource Download',
      mediaImport: 'Media Import',
      subscription: 'Subscription',
      site: 'Site',
      mediaServer: 'Media Server',
      manualProcess: 'Manual Process',
      plugin: 'Plugin',
      other: 'Other',
      telegram: 'Telegram',
      slack: 'Slack',
      synologyChat: 'SynologyChat',
      voceChat: 'VoceChat',
      webPush: 'WebPush',
    },
    words: {
      customIdentifiers: 'Custom Identifiers',
      identifiersDesc: 'Add rules to preprocess torrent names or file names to correct identification.',
      identifiersPlaceholder: 'Support regular expressions, special characters need \\ escape, one line for each rule',
      identifiersHint: 'Support regular expressions, special characters need \\ escape, one line for each rule',
      formatTitle: 'Supported configuration formats (mind the spaces):',
      formatContent:
        'Block words\n' +
        'Word to replace => Replacement\n' +
        'Front word <> Back word >> Episode offset (EP)\n' +
        'Word to replace => Replacement && Front word <> Back word >> Episode offset (EP)\n' +
        'Replacement format supports: &#123;tmdbid/doubanid=xxx;type=movie/tv;s=xxx;e=xxx&#125; to directly specify TMDBID/Douban ID, where s and e are season and episode numbers (optional)',
      identifierSaveSuccess: 'Custom identifiers saved successfully',
      identifierSaveFailed: 'Failed to save custom identifiers!',

      customReleaseGroups: 'Custom Release/Subtitle Groups',
      releaseGroupsDesc: 'Add release/subtitle groups that cannot be identified.',
      releaseGroupsPlaceholder:
        'Support regular expressions, special characters need \\ escape, one line for each group',
      releaseGroupsHint: 'Support regular expressions, special characters need \\ escape, one line for each group',
      releaseGroupSaveSuccess: 'Custom release/subtitle groups saved successfully',
      releaseGroupSaveFailed: 'Failed to save custom release/subtitle groups!',

      customization: 'Custom Placeholders',
      customizationDesc: 'Add custom placeholder regex patterns, use {customization} in rename format.',
      customizationPlaceholder:
        'Support regular expressions, special characters need \\ escape, separate multiple matches with new lines',
      customizationHint:
        'Support regular expressions, special characters need \\ escape, separate multiple matches with new lines',
      customizationSaveSuccess: 'Custom placeholders saved successfully',
      customizationSaveFailed: 'Failed to save custom placeholders!',

      transferExcludeWords: 'File Organization Block Words',
      excludeWordsDesc: 'Files or directories containing block words will not be organized.',
      excludeWordsPlaceholder:
        'Support regular expressions, special characters need \\ escape, one line for each block word',
      excludeWordsHint: 'Support regular expressions, special characters need \\ escape, one line for each block word',
      excludeWordsSaveSuccess: 'File organization block words saved successfully',
      excludeWordsSaveFailed: 'Failed to save file organization block words!',
    },
    search: {
      basicSettings: 'Basic Settings',
      basicSettingsDesc: 'Set data sources, rule groups and other basic information.',
      recognizeSource: 'Recognition Data Source',
      recognizeSourceDesc:
        'Default is TMDB. Douban is usually more friendly for Chinese works, but some foreign works have incomplete information.',
      themoviedb: 'TheMovieDb',
      douban: 'Douban',
      filterRuleGroup: 'Filter Rule Group',
      filterRuleGroupDesc: 'Set filter rule groups used during download process.',
      downloadLabel: 'Download Task Label',
      downloadLabelDesc: 'Download labels in downloader, used for filtering queries.',
      downloadLabelHint: 'Support multiple labels, separated by commas',
      downloadSite: 'Search Sites',
      downloadSiteDesc: 'Set site scope for specific category searches.',
      movieSites: 'Movie Sites',
      tvSites: 'TV Show Sites',
      animeSites: 'Anime Sites',
      saveSites: 'Save Sites',
      saveSuccess: 'Search settings saved successfully',
      saveFailed: 'Failed to save search settings!',
      saveRuleFailed: 'Failed to save rules!',
      movieCategory: 'Movies',
      tvCategory: 'TV Shows',
      animeCategory: 'Anime',
      downloadUser: 'Remote Search Auto Download User List',
      downloadUserHint:
        'Whether to automatically download when searching with Telegram, WeChat, etc., comma separated, set to all to represent all users auto-download',
      downloadUserPlaceholder: 'UserID1,UserID2',
      multipleNameSearch: 'Multiple Name Resource Search',
      multipleNameSearchHint:
        'Search site resources using multiple names (Chinese, English, etc.) and merge search results, will increase site access frequency',
      downloadSubtitle: 'Download Site Subtitles',
      downloadSubtitleHint: 'Check if site resources have separate subtitle files and download them automatically',
      mediaSource: 'Media Search Data Source',
      mediaSourceHint: 'Data sources and sorting used when searching for media information',
      filterRuleGroupHint: 'Filter results by selected filter rule groups when searching for media information',
      downloadLabelPlaceholder: 'MOVIEPILOT',
    },
    directory: {
      storage: 'Storage',
      storageDesc: 'Set up local or cloud storage.',
      directory: 'Directory',
      directoryDesc: 'Set up media file organization directory structure, matching in sequence.',
      organizeAndScrap: 'Organization & Scraping',
      organizeAndScrapDesc: 'Set rename format, scraping options, etc.',
      scrapSource: 'Scraping Data Source',
      scrapSourceHint: 'Metadata source for scraping',
      movieRenameFormat: 'Movie Rename Format',
      movieRenameFormatHint:
        'Using Jinja2 syntax, format reference: https://jinja.palletsprojects.com/en/3.0.x/templates',
      tvRenameFormat: 'TV Show Rename Format',
      tvRenameFormatHint: 'Using Jinja2 syntax, format reference: https://jinja.palletsprojects.com/en/3.0.x/templates',
      saveSuccess: 'Storage settings saved successfully',
      saveFailed: 'Failed to save storage settings!',
      directorySaveSuccess: 'Directory settings saved successfully',
      directorySaveFailed: 'Failed to save directory settings!',
      organizeSaveSuccess: 'Organization options saved successfully',
      organizeSaveFailed: 'Failed to save organization options!',
      duplicateDirectoryName: 'Duplicate directory names exist! Cannot save, please modify!',
      defaultDirName: 'Directory',
      storageSaveSuccess: 'Storage settings saved successfully',
      storageSaveFailed: 'Failed to save storage settings!',
    },
    rule: {
      customRules: 'Custom Rules',
      customRulesDesc: 'Custom priority rule items',
      priorityRuleGroups: 'Priority Rule Groups',
      priorityRuleGroupsDesc: 'Preset priority rule groups for use in search and subscription.',
      downloadRules: 'Download Rules',
      downloadRulesDesc: 'Choose the best option when multiple resources are matched.',
      resourcePriority: 'Resource Priority',
      sitePriority: 'Site Priority',
      siteUpload: 'Site Upload',
      resourceSeeder: 'Resource Seeders',
      emptyIdError: 'A rule has an empty ID, cannot save. Please modify!',
      emptyNameError: 'A rule has an empty name, cannot save. Please modify!',
      duplicateIdError: 'Duplicate rule IDs exist! Cannot save, please modify!',
      duplicateNameError: 'Duplicate rule names exist! Cannot save, please modify!',
      customRuleSaveSuccess: 'Custom rules saved successfully',
      customRuleSaveFailed: 'Failed to save custom rules!',
      emptyGroupNameError: 'A rule group has an empty name! Cannot save, please modify!',
      duplicateGroupNameError: 'Duplicate rule group names exist! Cannot save, please modify!',
      ruleGroupSaveSuccess: 'Priority rule groups saved successfully',
      ruleGroupSaveFailed: 'Failed to save priority rule groups!',
      customRuleCopySuccess: 'Custom rules copied to clipboard!',
      customRuleCopyFailed: 'Failed to copy custom rules: browser may not support or user blocked!',
      customRuleCopyError: 'Failed to copy custom rules!',
      ruleGroupCopySuccess: 'Priority rule groups copied to clipboard!',
      ruleGroupCopyFailed: 'Failed to copy priority rule groups: browser may not support or user blocked!',
      ruleGroupCopyError: 'Failed to copy priority rule groups!',
      currentPriorityRules: 'Current Download Priority Rules',
      currentPriorityRulesHint: 'Higher priority for items at the front, unselected items are not included in sorting',
      importCustomRules: 'Import Custom Rules',
      importRuleGroups: 'Import Priority Rule Groups',
      importFailed: 'Failed to import rules! Cannot parse input data!',
      importUnknownType: 'Failed to import rules! Unknown data type!',
      duplicateValue: 'Duplicate values exist',
      importNoId: 'Import failed! Found rules without IDs, may belong to priority rule groups!',
      importHasId: 'Import failed! Found rules with IDs, may belong to custom rules!',
    },
    scheduler: {
      title: 'Scheduled Jobs',
      subtitle:
        "Includes built-in system services and plugin services. Manual execution will not affect the job's normal schedule.",
      provider: 'Provider',
      taskName: 'Task Name',
      taskStatus: 'Task Status',
      nextRunTime: 'Next Run Time',
      execute: 'Execute',
      noService: 'No background services',
      running: 'Running',
      stopped: 'Stopped',
      waiting: 'Waiting',
      executeSuccess: 'Scheduled job execution request submitted successfully!',
    },
    subscribe: {
      basicSettings: 'Basic Settings',
      basicSettingsDesc: 'Set subscription mode, cycle and other basic settings',
      subscribeSites: 'Subscribe Sites',
      subscribeSitesDesc: 'Only selected sites will be used in subscriptions.',
      mode: 'Subscription Mode',
      modeHint: 'Auto: automatically crawl site homepage, Site RSS: subscribe via site RSS link',
      rssInterval: 'Site RSS Interval',
      rssIntervalHint: 'Set the site RSS running cycle, effective when subscription mode is `Site RSS`',
      filterRuleGroup: 'Subscription Priority Rule Group',
      filterRuleGroupHint: 'Filter subscriptions based on selected filter rule groups',
      bestVersionRuleGroup: 'Version Upgrade Priority Rule Group',
      bestVersionRuleGroupHint: 'Filter version upgrade subscriptions based on selected filter rule groups',
      timedSearch: 'Subscription Scheduled Search',
      timedSearchHint: 'Search all sites every 24 hours to supplement resources that may be missed by subscription',
      checkLocalMedia: 'Check Local Media Library',
      checkLocalMediaHint: 'Check if resources exist on storage disk to avoid duplicate downloads',
      modes: {
        auto: 'Auto',
        rss: 'Site RSS',
      },
      intervals: {
        min5: '5 minutes',
        min10: '10 minutes',
        min20: '20 minutes',
        min30: '30 minutes',
        hour1: '1 hour',
        hour12: '12 hours',
        day1: '1 day',
      },
      saveSuccess: 'Subscription sites saved successfully',
      saveFailed: 'Failed to save subscription sites!',
      settingsSaveSuccess: 'Subscription basic settings saved successfully',
      settingsSaveFailed: 'Failed to save subscription basic settings!',
    },
  },
  dialog: {
    progress: {
      processing: 'Processing',
    },
    userAddEdit: {
      add: 'Add User',
      edit: 'Edit User',
      username: 'Username',
      password: 'Password',
      confirmPassword: 'Confirm Password',
      email: 'Email',
      nickname: 'Nickname',
      status: 'Status',
      active: 'Active',
      inactive: 'Inactive',
      superUser: 'Super User',
      otp: 'Enable Two-Factor Authentication',
      avatar: 'Avatar',
      uploadAvatar: 'Upload Avatar',
      resetDefaultAvatar: 'Reset Default Avatar',
      restoreCurrentAvatar: 'Restore Current Avatar',
      notifications: 'Notifications',
      wechat: 'WeChat UserID',
      telegram: 'Telegram UserID',
      slack: 'Slack UserID',
      vocechat: 'VoceChat UserID',
      synologyChat: 'SynologyChat UserID',
      webPush: 'WebPush',
      creatingUser: 'Creating user [{name}], please wait',
      updatingUser: 'Updating user [{name}], please wait',
      usernameRequired: 'Username cannot be empty',
      usernameExists: 'Username already exists',
      passwordMismatch: 'The two passwords do not match',
      userCreated: 'User [{name}] created successfully',
      userCreateFailed: 'Failed to create user: {message}',
      userUpdateSuccess: 'User [{name}] updated successfully',
      userUpdateFailed: 'Failed to update user: {message}',
      userDeleteSuccess: 'User [{name}] deleted successfully',
      userDeleteFailed: 'Failed to delete user: {message}',
      invalidFile: 'The uploaded file does not meet the requirements, please choose a new avatar',
      fileSizeLimit: 'File size must not exceed 800KB',
      avatarUploadSuccess: 'New avatar uploaded successfully, will take effect after saving!',
      resetAvatarSuccess: 'Reset to default avatar, will take effect after saving!',
      restoreAvatarSuccess: 'Restored current avatar!',
      deleteConfirm: 'Confirm delete user [{name}]?',
      saveUserInfo: 'Save User Information',
      cannotDeleteCurrentUser: 'Cannot delete current logged-in user',
      deleteUser: 'Delete User',
    },
    searchBar: {
      search: 'Search',
      searchPlaceholder: 'Search features, subscriptions, settings...',
      recentSearches: 'Recent Searches',
      noRecentSearches: 'No recent search history',
      functions: 'Functions',
      noFunctionsFound: 'No matching functions',
      plugins: 'Plugins',
      noPluginsFound: 'No matching plugins',
      subscriptions: 'Subscriptions',
      noSubscriptionsFound: 'No matching subscriptions',
      searchSites: 'Search Sites',
      selectSites: 'Select Sites',
      collections: 'Collections',
      collectionSearch: 'Related series works',
      actorSearch: 'Related actors, directors, etc.',
      historySearch: 'Related history records',
      siteResources: 'Site Resources',
      searchInSites: 'Search for torrent resources in sites',
      relatedResources: 'Related Resources',
      searchTip: 'You can search for movies, TV shows, actors, resources, etc.',
    },
    searchSite: {
      selectSites: 'Select Sites',
      siteSearch: 'Site Search',
      searchAllSites: 'Selected {selected}/{total} sites',
      selectAll: 'Select All',
      deselectAll: 'Deselect All',
      confirm: 'Confirm',
      cancel: 'Cancel',
    },
    importCode: {
      import: 'Import',
      title: 'Import Code',
    },
    addDownload: {
      confirmDownload: 'Confirm Download',
      downloader: 'Downloader (Default)',
      saveDirectory: 'Save Directory (Auto)',
      defaultPlaceholder: 'Leave empty for default',
      autoPlaceholder: 'Leave empty for auto-match',
      downloading: 'Downloading...',
      startDownload: 'Start Download',
      downloadSuccess: '{site} {title} downloaded successfully!',
      downloadFailed: '{site} {title} download failed: {message}!',
    },
    subscribeShare: {
      shareSubscription: 'Share Subscription',
      season: 'Season {number}',
      title: 'Title',
      description: 'Description',
      descriptionHint:
        'Add a description about this subscription. Search terms, recognition words, etc. will be included in the share by default',
      shareUser: 'Share User',
      shareUserHint: "Sharer's nickname",
      confirmShare: 'Confirm Share',
      shareSuccess: '{name} shared successfully!',
      shareFailed: '{name} share failed: {message}!',
    },
    u115Auth: {
      loginTitle: '115 Cloud Login',
      scanQrCode: 'Please scan with WeChat or 115 client',
      scanned: 'Scanned, please confirm login',
      complete: 'Complete',
    },
    aliyunAuth: {
      loginTitle: 'Aliyun Drive Login',
      scanQrCode: 'Please scan with Aliyun Drive App',
      scanned: 'Scanned',
      complete: 'Complete',
    },
    rcloneConfig: {
      title: 'RClone Configuration',
      filePath: 'rclone config file path',
      fileContent: 'rclone config file content',
      defaultContent:
        '# Please fill in your rclone config file content here \n# Please refer to https://rclone.org/docs/ \n# Storage node name must be: MP',
      complete: 'Complete',
    },
    alistConfig: {
      title: 'Alist Configuration',
      serverUrl: 'Alist server address',
      username: 'Username',
      password: 'Password',
      tokenUrl: 'Token acquisition address',
      loginType: 'Login method',
      loginTypeOptions: {
        guest: 'Guest',
        username: 'Username & Password',
        token: 'Token',
      },
      complete: 'Complete',
    },
    workflowAddEdit: {
      addTitle: 'Add Workflow',
      editTitle: 'Edit Workflow',
      name: 'Name',
      namePlaceholder: 'Workflow name',
      desc: 'Description',
      descPlaceholder: 'Workflow description',
      enabled: 'Enabled',
      schedule: 'Schedule',
      cronExpr: 'Cron Expression',
      cronExprDesc: 'Cron expression for workflow scheduling',
      nameRequired: 'Please fill in complete information!',
      addSuccess: 'Task created successfully, please edit the workflow!',
      addFailed: 'Failed to create task: {message}',
      editSuccess: 'Task modified successfully!',
      editFailed: 'Failed to modify task: {message}',
      cancel: 'Cancel',
      confirm: 'Confirm',
    },
    workflowActions: {
      title: 'Edit Workflow',
      noActionsMessage: 'Workflow has no actions, please add actions',
      addAction: 'Add Action',
      editAction: 'Edit Action',
      deleteAction: 'Delete Action',
      moveUp: 'Move Up',
      moveDown: 'Move Down',
      nameLabel: 'Action Name',
      nameRequired: 'Action name cannot be empty',
      typeLabel: 'Action Type',
      typeRequired: 'Action type cannot be empty',
      paramsLabel: 'Action Parameters',
      outputLabel: 'Action Output',
      saveAction: 'Save Action',
      cancelAction: 'Cancel',
      confirmDeleteTitle: 'Confirm Delete Action',
      confirmDeleteMessage: 'Are you sure you want to delete this action? This operation cannot be undone.',
      yesDelete: 'Yes, Delete',
      noCancel: 'Cancel',
      invalidConnection: 'Invalid connection: cannot connect to self or ports of the same type!',
      componentNotFound: 'Component {component} not found',
      componentAdded: 'Component added to canvas',
      saveSuccess: 'Task workflow saved successfully!',
      saveFailed: 'Failed to save task workflow: {message}',
      importTitle: 'Import Task Workflow',
      importSuccess: 'Import successful!',
      importFailed: 'Import failed!',
      codeCopied: 'Task workflow code copied to clipboard!',
    },
    siteCookieUpdate: {
      title: 'Update Site Cookie',
      checkHint: 'Checking login status, please wait...',
      confirmUpdateTitle: 'Confirm Update',
      confirmUpdateMessage: "Do you want to update this site's cookie with the local cookie?",
      processing: 'Processing...',
      success: 'Cookie updated successfully',
      failed: 'Failed to update cookie',
      confirm: 'Confirm',
      cancel: 'Cancel',
    },
    siteAddEdit: {
      addTitle: 'Add Site',
      editTitle: 'Edit Site',
      nameLabel: 'Site Name',
      urlLabel: 'Site URL',
      iconLabel: 'Site Icon',
      uploadIcon: 'Upload Icon',
      cookie: 'Cookie',
      rssUrl: 'RSS Link',
      enableLabel: 'Enable',
      pubEnableLabel: 'Public Resources',
      priorityLabel: 'Priority',
      signInLabel: 'Sign In',
      proxies: 'Proxies',
      userInfo: 'User Info',
      cancel: 'Cancel',
      confirm: 'Save',
    },
    pluginConfig: {
      title: 'Plugin Configuration',
      save: 'Save',
      close: 'Close',
    },
    pluginData: {
      title: 'Plugin Data',
      save: 'Save',
      close: 'Close',
    },
    pluginMarketSetting: {
      title: 'Plugin Market Settings',
      repoUrl: 'Plugin Repository URL',
      repoPlaceholder: 'Format: https://github.com/jxxghp/MoviePilot-Plugins/,https://github.com/xxxx/xxxxxx/',
      repoHint: 'Multiple URLs separated by commas, only Github repositories are supported',
      close: 'Close',
      save: 'Save',
      saveSuccess: 'Plugin repository saved successfully',
      saveFailed: 'Failed to save plugin repository: {message}!',
    },
    userAuth: {
      title: 'User Authentication',
      codeLabel: 'Authentication Code',
      codePlaceholder: 'Please enter authentication code',
      authBtn: 'Start Authentication',
      closeBtn: 'Close',
      selectSite: 'Select Authentication Site',
      selectSiteRequired: 'Please select authentication site!',
      siteConfigNotExist: 'Site configuration does not exist!',
      fieldRequired: 'Please enter {name}!',
      authSuccess: 'User authentication successful, please log in again!',
      authFailed: 'Authentication failed: {message}',
    },
    transferQueue: {
      title: 'Organization Queue',
      name: 'Name',
      type: 'Type',
      state: 'Status',
      progress: 'Progress',
      startTime: 'Start Time',
      speedTitle: 'Speed',
      pathTitle: 'Path',
      sizeTitle: 'Size',
      waitingState: 'Waiting',
      runningState: 'Organizing',
      finishedState: 'Completed',
      failedState: 'Failed',
      cancelledState: 'Cancelled',
      noTasks: 'No tasks being organized',
      processing: 'Please wait ...',
      stopAll: 'Stop All',
      startAll: 'Start All',
      refresh: 'Refresh',
      close: 'Close',
    },
    reorganize: {
      title: 'Organize',
      sourceTitle: 'Source File',
      targetTitle: 'Target File',
      processingTitle: 'Processing',
      confirmTitle: 'Confirm',
      selectFile: 'Select File',
      selectTarget: 'Select Target',
      selectMediaType: 'Select Media Type',
      movie: 'Movie',
      tv: 'TV Show',
      selectTmdbId: 'Select TMDB ID',
      selectMediaInfo: 'Select Media Info',
      selectTargetPath: 'Select Target Path',
      selectTargetDir: 'Select Target Directory',
      selectFileName: 'Select Filename',
      confirmMoving: 'Please confirm move!',
      sourceLabel: 'Source file:',
      targetLabel: 'Target directory:',
      filenameLabel: 'Filename:',
      close: 'Close',
      next: 'Next',
      previous: 'Previous',
      confirm: 'Confirm',
      manualTitle: 'Manual Organization',
      multipleItemsTitle: 'Organize - {count} Items',
      singleItemTitle: 'Organize - {path}',
      targetStorage: 'Target Storage',
      targetStorageHint: 'Organization target storage',
      transferType: 'Organization Method',
      transferTypeHint: 'File operation organization method',
      targetPath: 'Target Path',
      targetPathHint: 'Organization target path, leave empty for auto-match',
      targetPathPlaceholder: 'Leave empty for auto',
      mediaType: 'Type',
      mediaTypeHint: 'File media type',
      tmdbId: 'TheMovieDb ID',
      doubanId: 'Douban ID',
      mediaIdHint: 'Query media ID by name, leave empty for auto recognition',
      mediaIdPlaceholder: 'Leave empty for auto recognition',
      episodeGroup: 'Episode Group ID',
      episodeGroupHint: 'Specify episode group',
      episodeGroupPlaceholder: 'Manually query episode group',
      season: 'Season',
      seasonHint: 'Which season',
      episodeDetail: 'Episode',
      episodeDetailHint: 'Episode number or range, e.g. 1 or 1,2',
      episodeDetailPlaceholder: 'Start episode,End episode',
      episodeFormat: 'Episode Positioning',
      episodeFormatHint: 'Use {ep} to position episode number part in filename to assist recognition',
      episodeFormatPlaceholder: 'Use {ep} to position episode',
      episodeOffset: 'Episode Offset',
      episodeOffsetHint: 'Episode offset calculation, e.g. -10 or EP*2',
      episodeOffsetPlaceholder: 'e.g. -10',
      episodePart: 'Specify Part',
      episodePartHint: 'Specify part, e.g. part1',
      episodePartPlaceholder: 'e.g. part1',
      minFileSize: 'Min File Size (MB)',
      minFileSizeHint: 'Only organize files larger than minimum file size',
      typeFolderOption: 'Classify by Type',
      typeFolderHint: 'Add subdirectory by media type in target path during organization',
      categoryFolderOption: 'Classify by Category',
      categoryFolderHint: 'Add subdirectory by media category in target path during organization',
      scrapeOption: 'Scrape Metadata',
      scrapeHint: 'Automatically scrape metadata after organization',
      fromHistoryOption: 'Reuse Historical Recognition Info',
      fromHistoryHint: 'Use media info already recognized in historical organization records',
      addToQueue: 'Add to Organization Queue',
      reorganizeNow: 'Organize Now',
      auto: 'Auto',
      processing: 'Processing ...',
      successMessage: 'File {name} has been added to the organization queue!',
    },
    subscribeEdit: {
      titleDefault: 'Default Subscription Rules',
      titleEditFormat: 'Edit Subscription - {name} {season}',
      seasonFormat: 'Season {number}',
      tabs: {
        basic: 'Basic',
        advance: 'Advanced',
      },
      searchKeyword: 'Search Keywords',
      searchKeywordHint: 'Specify keywords used when searching sites',
      totalEpisode: 'Total Episodes',
      totalEpisodeHint: 'Total number of episodes',
      startEpisode: 'Start Episode',
      startEpisodeHint: 'Starting episode number to subscribe',
      quality: 'Quality',
      qualityHint: 'Subscription resource quality',
      resolution: 'Resolution',
      resolutionHint: 'Subscription resource resolution',
      effect: 'Effects',
      effectHint: 'Subscription resource effects',
      subscribeSites: 'Subscription Sites',
      subscribeSitesHint: 'Range of sites for subscription, use system settings if none selected',
      downloader: 'Downloader',
      downloaderHint: 'Specify downloader for this subscription',
      savePath: 'Save Path',
      savePathHint: 'Specify download save path for this subscription, leave empty to use default download directory',
      bestVersion: 'Version Upgrade',
      bestVersionHint: 'Perform version upgrade subscription based on upgrade priorities',
      searchImdbid: 'Search Using ImdbID',
      searchImdbidHint: 'Use ImdbID for precise resource searching',
      showEditDialog: 'Edit More Rules When Subscribing',
      showEditDialogHint: 'Show this edit subscription dialog when adding subscription',
      include: 'Include (Keywords, Regex)',
      includeHint: 'Include rules, supports regular expressions',
      exclude: 'Exclude (Keywords, Regex)',
      excludeHint: 'Exclude rules, supports regular expressions',
      filterGroups: 'Priority Rule Groups',
      filterGroupsHint: 'Filter subscriptions by selected filter rule groups',
      episodeGroup: 'Specify Episode Group',
      episodeGroupHint: 'Recognize and scrape by specific episode group',
      season: 'Specify Season',
      seasonHint: 'Specify any season for subscription',
      mediaCategory: 'Custom Category',
      mediaCategoryHint: 'Specify category name, leave empty for auto-recognition',
      customWords: 'Custom Recognition Words',
      customWordsHint: 'Recognition words only used for this subscription',
      customWordsPlaceholder:
        'Block word\nReplaced word => Replacement word\nPrefix <> Suffix >> Episode offset (EP)\nReplaced word => Replacement word && Prefix <> Suffix >> Episode offset (EP)\nReplacement word supports format: &#123; tmdbid/doubanid=xxx;type=movie/tv;s=xxx;e=xxx &#125; to directly specify TMDBID/Douban ID recognition, where s, e are season and episode numbers (optional)',
      cancelSubscribe: 'Cancel Subscription',
      save: 'Save',
      cancelSubscribeConfirm: 'Are you sure you want to cancel the subscription?',
    },
    subscribeFiles: {
      title: 'Downloaded Files',
      noFilesMessage: 'No files',
      close: 'Close',
      downloadTab: 'Download Files',
      libraryTab: 'Media Library Files',
      episodeColumn: 'Episode',
      torrentColumn: 'Torrent',
      fileColumn: 'File',
      itemsPerPage: 'Items per page',
      pageText: '{0}-{1} of {2} items',
      loadingText: 'Loading...',
      noData: 'No data',
      season: 'Season {number}',
    },
    subscribeHistory: {
      title: 'Subscription History',
      name: 'Name',
      time: 'Time',
      type: 'Type',
      mediaName: 'Media Name',
      message: 'Message',
      torrents: 'Torrents',
      episodes: 'Episodes',
      noRecords: 'No records',
      close: 'Close',
    },
    subscribeSeason: {
      title: 'Select Season',
      seasonTitle: 'Season {number}',
      close: 'Close',
      confirm: 'Confirm',
    },
    siteUserData: {
      title: 'Site User Data',
      updateTime: 'Update Time',
      username: 'Username',
      uploadTitle: 'Upload',
      uploadTotal: 'Total Upload',
      downloadTitle: 'Download',
      downloadTotal: 'Total Download',
      seedingTitle: 'Seeding',
      seedingCount: 'Total Seeding Count',
      seedingSize: 'Total Seeding Size',
      userLevel: 'User Level',
      msgCount: 'Unread Messages',
      inviteCount: 'Invites',
      bonus: 'Bonus Points',
      ratio: 'Ratio',
      joinTime: 'Join Time',
      trafficHistory: 'Traffic History',
      seedingDistribution: 'Seeding Distribution',
      volumeTitle: 'Volume',
      countTitle: 'Count:',
      noData: 'None',
      refreshing: 'Refreshing site data...',
      close: 'Close',
    },
    siteResource: {
      title: 'Site Resources',
      searchHint: 'Search resources',
      close: 'Close',
    },
    forkSubscribe: {
      title: 'Copy Subscription',
      selectSubscriber: 'Select Copy Target',
      overwriteExisting: 'Overwrite Existing Subscription',
      overwriteExistingHint: 'Whether to overwrite when target user already has this subscription',
      confirm: 'Confirm',
      cancel: 'Cancel',
    },
  },
  file: {
    newFolder: 'New Folder',
    createFolder: 'Create Folder',
    fileName: 'File Name',
    fileSize: 'File Size',
    fileType: 'File Type',
    lastModified: 'Last Modified',
    actions: 'Actions',
    rename: 'Rename',
    delete: 'Delete',
    confirmFileDelete: 'Confirm Delete',
    upload: 'Upload',
    download: 'Download',
    preview: 'Preview',
    selectAll: 'Select All',
    deselectAll: 'Deselect All',
    moveUp: 'Go Back',
    sortByName: 'Sort by Name',
    sortByTime: 'Sort by Time',
    currentName: 'Current Name',
    newName: 'New Name',
    includeSubfolders: 'Auto rename all media files in directory',
    emptyFolder: 'Empty Folder',
    noFilesInFolder: 'No files in this folder',
    autoRecognize: 'Auto Recognize Name',
    directoryTree: 'Directory Tree',
    rootDirectory: 'Root Directory',
    noDirectories: 'No directories available',
    directory: 'Directory',
    file: 'File',
    size: 'Size',
    modifyTime: 'Modify Time',
    noFiles: 'No directories or files',
    emptyDirectory: 'Empty directory',
    confirmDelete: 'Are you sure you want to delete {type} {name}?',
    confirmBatchDelete: 'Are you sure you want to delete {count} selected items?',
    deleting: 'Deleting {name}...',
    recognize: 'Recognize',
    recognizing: 'Recognizing {path}...',
    recognizeFailed: '{path} recognition failed!',
    scrape: 'Scrape',
    scraping: 'Scraping {path}...',
    scrapeCompleted: '{path} scraping completed!',
    confirmScrape: 'Are you sure you want to scrape {path}?',
    confirmBatchScrape: 'Are you sure you want to scrape {count} selected items?',
    renaming: 'Renaming {name}...',
    renamingAll: 'Renaming {path} and all files in the directory...',
    close: 'Close',
    loadingDirectoryStructure: 'Loading directory structure...',
    reorganize: 'Reorganize',
  },
  person: {
    alias: 'Also Known As:',
    credits: 'Credits',
    biography: 'Biography',
    birthday: 'Birthday',
    placeOfBirth: 'Place of Birth',
  },
  error: {
    title: 'Error!',
    networkError: 'Unable to get media information, please check your network connection.',
    serverError: 'Server error, please try again later.',
    notFound: 'Requested resource not found.',
  },
  plugin: {
    sort: {
      popular: 'Popular',
      name: 'Plugin Name',
      author: 'Author',
      repository: 'Plugin Repository',
      latest: 'Latest Release',
    },
    installingPlugin: 'Installing plugin...',
    installing: 'Installing {name} v{version} ...',
    installSuccess: 'Plugin {name} installed successfully!',
    installFailed: 'Plugin {name} installation failed: {message}',
    uninstalling: 'Uninstalling {name} ...',
    uninstallSuccess: 'Plugin {name} uninstalled successfully!',
    uninstallFailed: 'Plugin {name} uninstallation failed: {message}',
    updating: 'Updating {name} to v{version} ...',
    updateSuccess: 'Plugin {name} updated successfully!',
    updateFailed: 'Plugin {name} update failed: {message}',
    noPlugins: 'No plugins installed',
    installed: 'Installed',
    notInstalled: 'Not Installed',
    hasUpdate: 'Update Available',
    configuring: 'Configuring',
    enable: 'Enable',
    disable: 'Disable',
    settings: 'Settings',
  },
  profile: {
    personalInfo: 'Personal Information',
    uploadNewAvatar: 'Upload New Avatar',
    avatarFormatError: 'The uploaded file does not meet requirements, please select a new avatar',
    avatarSizeError: 'File size must not exceed 800KB',
    avatarUploadSuccess: 'New avatar uploaded successfully, will take effect after saving!',
    resetAvatarSuccess: 'Reset to default avatar, will take effect after saving!',
    restoreAvatarSuccess: 'Restored current avatar!',
    savingInProgress: 'Saving in progress, please wait...',
    usernameRequired: 'Username cannot be empty',
    passwordMismatch: 'The two passwords do not match',
    usernameChangeSuccess: '[{oldName}] renamed to [{newName}], user information saved successfully!',
    saveSuccess: 'User information saved successfully!',
    saveFailedWithNameChange: '[{oldName}] renamed to [{newName}], information save failed: {message}!',
    saveFailed: 'User information save failed: {message}!',
    nickname: 'Nickname',
    nicknamePlaceholder: 'Display nickname, takes precedence over username',
    accountBinding: 'Account Binding',
    wechatUser: 'WeChat User',
    telegramUser: 'Telegram User',
    slackUser: 'Slack User',
    vocechatUser: 'VoceChat User',
    synologychatUser: 'SynologyChat User',
    doubanUser: 'Douban User',
    twoFactorAuthentication: 'Two-Factor Authentication',
    enableTwoFactor: 'Enable Two-Factor Authentication',
    disableTwoFactor: 'Disable Two-Factor Authentication',
    otpGenerateFailed: 'Failed to get OTP URI: {message}!',
    otpDisableSuccess: 'Two-factor authentication disabled successfully!',
    otpDisableFailed: 'Failed to disable OTP: {message}!',
    otpCodeRequired: 'Please enter the 6-digit verification code',
    otpEnableSuccess: 'Two-factor authentication enabled successfully!',
    otpEnableFailed: 'Failed to enable OTP: {message}!',
    authenticatorApp: 'Authenticator App',
    authenticatorAppDescription:
      'Use an authenticator app like Google Authenticator, Microsoft Authenticator, Authy, or 1Password to scan the QR code. It will generate a 6-digit code for you to enter below.',
    secretKeyTip:
      "If you're having trouble with the QR code, select manual entry in your app and enter the code above.",
    enterVerificationCode: 'Enter verification code to confirm enabling two-factor authentication',
    avatarFormatTip: 'JPG, PNG, GIF, WEBP formats allowed, maximum size 800KB.',
  },
}
